[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "clientcontributionfl"
version = "1.0.0"
description = "A Flower-based Federated Learning project using FedAvg and SecAgg+ protocol"
authors = [
    {name = "Gabriele Lerani", email = "gabriele.lerani2000@gmail.com"},
]
dependencies = [
    "flwr[simulation]>=1.11.0",
    "flwr-datasets[vision]>=0.3.0",
    "torch==2.4.1",
    "torchmetrics",
    "torchvision==0.19.1",
    "matplotlib==3.9.2"
]

[tool.hatch.build.targets.wheel]
packages = ["."]

[tool.flwr.app]
publisher = "gabriele"

[tool.flwr.app.components]
serverapp = "clientcontributionfl.server_app:app"
clientapp = "clientcontributionfl.client_app:app"

[tool.flwr.app.config]
num_rounds = 10
fraction_fit = 0.3
fraction_evaluate = 0.1
num_clients_per_round_fit = 2
num_clients_per_round_eval = 2
save_path = "results"
strategy = "ZkAvg"

# dataset config
dataset_name = "ylecun/mnist"
partitioner = "iid_and_non_iid"
balanced = false  # if true iid partitions will have same size.
plot_label_distribution = true
num_classes_per_partition = 5 # only for pathological distribution
alpha = 0.5
batch_size = 10

# dataset config for non_iid nodes
iid_ratio = 0.7 # percentage of iid_node
x_non_iid = 2 # number of labels of non_iid clients
dishonest = true # if true all non iid nodes will send a fake score
dishonest_value = 1000000000 # fake value dishonest clients send to server

# value for power of choice strategy
d = 5 # size of the candidate set between max(CK, 1) <= d <= K

# secaggplus config
secaggplus = false
num_shares = 3
reconstruction_threshold = 2
max_weight = 9000

# train config
gamma = 0.0 # weight of score
device = "cpu"
num_epochs = 1
lr = 0.01

# zk proof params
scale = 10000000 # weight of the diversity score
beta = 1 # the importance to give variance
thr = 400 # num of minimum label to have positive contribution
selection_thr = 0.1 # clients with normalized score above 0.1 are selected for training

[tool.flwr.federations]
default = "local-simulation"

[tool.flwr.federations.local-simulation]
backend="ray"
options.num-supernodes = 5
options.backend.client-resources.num-cpus = 7 # num of cpu used for each client up
options.backend.client-resources.num-gpus = 1.0 # ratio of VRAM a ClientApp has access to
